//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

// The second version of the infusion pump includes the following features:
// - The 3 types of audio alarms (Insistent, Non-insistent, Continuous alarms)
// - Using the pump on battery - internal rechargeable battery 

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked, low_battery, alarm_system_fail, set_ac_power, 
    set_battery_power, ac_power_fail, recover_ac_power, check_power
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
// 0 Silenced
// 1 = Insistent alarm - E.g. flow blocked 
// 2 = Non-insistent alarm - E.g low battery
// 3 = Continuous alarm - 

const Silenced = 0
const InsistentAlarm = 1
const NonInsistentAlarm = 2
const ContinuousAlarm = 3

range AlarmStateT = Silenced .. ContinuousAlarm

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

const CordConnected    = 8 // the cord of the pump is connected to a suitable AC
const CordNotConnected = 9 // the cord of the pump is not connected to a suitable AC

range CordConnectedStateT = CordConnected .. CordNotConnected

//=====================
// Process Definitions
//=====================

PUMP = UNPLUGGED,

UNPLUGGED =
(
    plug_in -> POWER_OFF
),

POWER_OFF = 
(
    turn_on -> AC_BATTERY_POWER[CordConnected]
),

AC_BATTERY_POWER[power:CordConnectedStateT] =
(
    when(power == CordConnected)
        set_ac_power -> SETUP[ParamsNotSet][LineUnlocked][power]
    |
    when(power == CordNotConnected)
        set_battery_power -> SETUP[ParamsNotSet][LineUnlocked][power]
),

//
// Pump in setup mode:
// - Once required pump parameters (just rate in this case) are set,
//   physical connections can be made and line can be locked
// - In case of low battery, we call low_battery (example of Non-insistent alarm)Â°
// - if the alarm system fails, we call alarm_system_fail (example of continuous alarm)
//
SETUP[params:ParamsStateT][lineLock:LineLockStateT][power:CordConnectedStateT]  = 
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (params == ParamsNotSet && lineLock == LineUnlocked)
        set_rate -> enter_value ->
            (press_set -> SETUP[ParamsSet][lineLock][power]
             |
             press_cancel -> SETUP[ParamsNotSet][lineLock][power])
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][lineLock][power]
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked][power]
    |
    when (lineLock == LineLocked)
        confirm_settings -> INFUSION[UnitUnlocked][power]
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line -> SETUP[params][LineUnlocked][power]
    |
    check_power -> SET_POWER_MODE[power]
    |
    low_battery -> NON_INSISTENT_ALARM                        // at any time, we can have a non insistent alarm
    |
    alarm_system_fail -> CONTINUOUS_ALARM                     // at any time, we can have a continuous alarm
),

SET_POWER_MODE[power:CordConnectedStateT] =
(
    when (power == CordConnected)                             // If the cord is connected and the AC power fails, switch to the battery
        ac_power_fail -> AC_BATTERY_POWER[CordNotConnected]
    |
    when (power == CordNotConnected)                          // If the pump is using the battery, we can switch to the AC power
        recover_ac_power -> AC_BATTERY_POWER[CordConnected]
),

//
// Pump in infusion mode:
// - Always be able to turn the unit off, even if locked
// - Allow the user to lock/unlock the unit
// - Errors could occur with the pump (e.g., line became pinched or plugged)
//
INFUSION[unitLock:UnitLockStateT][power:CordConnectedStateT] =
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (unitLock == UnitUnlocked)
        change_settings -> SETUP[ParamsSet][LineLocked][power]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> INFUSION[UnitLocked][power]
    |
    when (unitLock == UnitLocked)
        unlock_unit -> INFUSION[UnitUnlocked][power]
    |
    dispense_main_med_flow -> INFUSION[unitLock][power]
    |
    flow_blocked -> sound_alarm[InsistentAlarm] -> INFUSION_BLOCKED[unitLock][InsistentAlarm][power]
    |
    low_battery -> NON_INSISTENT_ALARM                           // at any time, we can have a non insistent alarm
    |
    alarm_system_fail -> CONTINUOUS_ALARM                        // at any time, we can have a continuous alarm
),

//
// Pump stuck (medication flow suspended)
//
INFUSION_BLOCKED[unitLock:UnitLockStateT][alarm:AlarmStateT][power:CordConnectedStateT] =
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (alarm == InsistentAlarm)
        sound_alarm[alarm] -> INFUSION_BLOCKED[unitLock][alarm][power]
    |
    when (alarm == InsistentAlarm)
        silence_alarm -> INFUSION_BLOCKED[unitLock][Silenced][power]
    |
    flow_unblocked -> INFUSION[unitLock][power]
),

NON_INSISTENT_ALARM =
(
    sound_alarm[NonInsistentAlarm] -> NON_INSISTENT_ALARM
    |
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
),

CONTINUOUS_ALARM =
(
    sound_alarm[ContinuousAlarm] -> CONTINUOUS_ALARM
    |
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
).

