\documentclass{article}\usepackage{amsfonts,enumerate,zed-csp}\input{handout}\newcommand{\Until}{\,\mathcal{U}\,}\newcommand{\Next}{\bigcirc}\begin{document}\homework{}{7 November 2016}{Homework \#11: Concurrency Modeling and LTL}{}\begin{enumerate}\item Exercises from MK06. ({\sc Note}: For every question in which you are asked to use LTSA, you should include the relevant output of the checker and briefly explain those results.)\begin{enumerate}\item 5.4 (just the FSP part)  5.4 The Dining Savages: A tribe of savages eats communal dinners from a large pot that can hold M servings of stewed missionary. When a savage wants to eat, he helps himself from the pot unless it is empty in which case he waits for the pot to be filled. If the pot is empty, the cook refills the pot with M servings. The behavior of the savages and the cook is described by:SAVAGE = (getserving -> SAVAGE).         COOK   = (fillpot -> COOK).Model the behavior of the pot as an FSP process and then implement it as a Java monitor.\item 6.2  6.2 One solution to the Dining Philosophers problem permits only four philosophers to sit down at the table at the same time. Specify a BUTLER process which, when composed with the model of section 6.2, permits a maximum of four philosophers to engage in the sitdown action before an arise action occurs. Show that this system is deadlock-free.\item 6.4  6.4 It is possible for the following system to deadlock. Explain how this deadlock occurs and relate it to one of the four necessary and sufficient conditions for deadlock to occur.Alice = (call.bob -> wait.chris -> Alice).    Bob   = (call.chris -> wait.alice -> Bob).    Chris = (call.alice -> wait.bob -> Chris).    ||S = (Alice || Bob || Chris) /{call/wait}.  \item 7.1 \\    7.1 What action trace violates the following safety property?property PS = (a->(b->PS|a->PS)|b->a->PS). \\      \item 7.2 \\    7.2 A lift has a maximum capacity of ten people. In the model of the lift control system, passengers entering a lift are signaled by an enter action and passengers leaving the lift are signaled by an exit action. Specify a safety property in FSP which when composed with the lift will check that the system never allows the lift that it controls to have more than ten occupants. \\  \item 7.3 \\    7.3 Specify a safety property for the car park problem of Chapter 5, which asserts that the car park does not overflow. Specify a progress property which asserts that cars eventually enter the car park. If car departure is lower priority than car arrival, does starvation occur? \\\end{enumerate}\item Using the semantic rules for LTL covered in the lecture on that topic, expand the following temporal formulas to their equivalent semantic form (using the $(\sigma,i)\models P)$  representation). For each, say what it means in English.\begin{enumerate}\item $Q \implies \Diamond \Box P$ \\  $(\sigma,1)\models Q \implies((\sigma,1)\models \Diamond \Box P)$\item $\Diamond (Q \land \Box P)$ \\  $\Diamond (((\sigma,i)\models Q) \land \Box (\sigma,1)\models P))$\end{enumerate}\item Translate each of the following into a formula of linear temporal logic. (\textsc{Note}: For this assignment, use only the temporal logic operators: $\Box$, $\Diamond$, $\Next$, $\Until$, $\Until_w$.)\begin{enumerate}\item $p$ is sometimes true and sometimes false.\item $p$ and $q$ are never true together.\item $q$ and $r$ are both eventually false.\item $q$ and $r$ are eventually both false.\item If $p$ is never true, then $q$ is always true.\item Eventually, if $p$ is true, then $q$ is also true.\item If $p$ is eventually true, $q$ is never true.\item $p$ is true finitely often (and at least once).\item If $p$ is initially true, then it will be true infinitely often; otherwise it will never be true.\item $p$ is initially true and thereafter alternates between being true and being false (i.e., if $(\sigma,i)\models p$, then $(\sigma,i+1)\models \neg p$ and if $(\sigma,i)\models \neg p$, then $(\sigma,i+1)\models p$).\end{enumerate}\end{enumerate}\end{document}